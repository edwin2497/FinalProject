//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Presentation.Service1_Reference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdministrativeDTO", Namespace="http://schemas.datacontract.org/2004/07/CommunicationApp")]
    [System.SerializableAttribute()]
    public partial class AdministrativeDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondLastNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardId {
            get {
                return this.CardIdField;
            }
            set {
                if ((this.CardIdField.Equals(value) != true)) {
                    this.CardIdField = value;
                    this.RaisePropertyChanged("CardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstLastName {
            get {
                return this.FirstLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstLastNameField, value) != true)) {
                    this.FirstLastNameField = value;
                    this.RaisePropertyChanged("FirstLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((this.PhoneField.Equals(value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondLastName {
            get {
                return this.SecondLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondLastNameField, value) != true)) {
                    this.SecondLastNameField = value;
                    this.RaisePropertyChanged("SecondLastName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdministrativeList", Namespace="http://schemas.datacontract.org/2004/07/CommunicationApp")]
    [System.SerializableAttribute()]
    public partial class AdministrativeList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Presentation.Service1_Reference.AdministrativeDTO[] listsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Presentation.Service1_Reference.AdministrativeDTO[] lists {
            get {
                return this.listsField;
            }
            set {
                if ((object.ReferenceEquals(this.listsField, value) != true)) {
                    this.listsField = value;
                    this.RaisePropertyChanged("lists");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service1_Reference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAdministrativeId", ReplyAction="http://tempuri.org/IService1/GetAdministrativeIdResponse")]
        Presentation.Service1_Reference.AdministrativeDTO GetAdministrativeId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAdministrativeId", ReplyAction="http://tempuri.org/IService1/GetAdministrativeIdResponse")]
        System.Threading.Tasks.Task<Presentation.Service1_Reference.AdministrativeDTO> GetAdministrativeIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertAdministrative", ReplyAction="http://tempuri.org/IService1/InsertAdministrativeResponse")]
        void InsertAdministrative(Presentation.Service1_Reference.AdministrativeDTO administrative);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertAdministrative", ReplyAction="http://tempuri.org/IService1/InsertAdministrativeResponse")]
        System.Threading.Tasks.Task InsertAdministrativeAsync(Presentation.Service1_Reference.AdministrativeDTO administrative);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAdministrative", ReplyAction="http://tempuri.org/IService1/DeleteAdministrativeResponse")]
        void DeleteAdministrative(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAdministrative", ReplyAction="http://tempuri.org/IService1/DeleteAdministrativeResponse")]
        System.Threading.Tasks.Task DeleteAdministrativeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModifyAdministrative", ReplyAction="http://tempuri.org/IService1/ModifyAdministrativeResponse")]
        void ModifyAdministrative(Presentation.Service1_Reference.AdministrativeDTO administrative);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModifyAdministrative", ReplyAction="http://tempuri.org/IService1/ModifyAdministrativeResponse")]
        System.Threading.Tasks.Task ModifyAdministrativeAsync(Presentation.Service1_Reference.AdministrativeDTO administrative);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllAdministrative", ReplyAction="http://tempuri.org/IService1/GetAllAdministrativeResponse")]
        Presentation.Service1_Reference.AdministrativeList GetAllAdministrative();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllAdministrative", ReplyAction="http://tempuri.org/IService1/GetAllAdministrativeResponse")]
        System.Threading.Tasks.Task<Presentation.Service1_Reference.AdministrativeList> GetAllAdministrativeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginAdministrative", ReplyAction="http://tempuri.org/IService1/LoginAdministrativeResponse")]
        bool LoginAdministrative(int id, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginAdministrative", ReplyAction="http://tempuri.org/IService1/LoginAdministrativeResponse")]
        System.Threading.Tasks.Task<bool> LoginAdministrativeAsync(int id, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsAdministrative", ReplyAction="http://tempuri.org/IService1/IsAdministrativeResponse")]
        bool IsAdministrative(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsAdministrative", ReplyAction="http://tempuri.org/IService1/IsAdministrativeResponse")]
        System.Threading.Tasks.Task<bool> IsAdministrativeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAdministrativeCardId", ReplyAction="http://tempuri.org/IService1/GetAdministrativeCardIdResponse")]
        Presentation.Service1_Reference.AdministrativeDTO GetAdministrativeCardId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAdministrativeCardId", ReplyAction="http://tempuri.org/IService1/GetAdministrativeCardIdResponse")]
        System.Threading.Tasks.Task<Presentation.Service1_Reference.AdministrativeDTO> GetAdministrativeCardIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Presentation.Service1_Reference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Presentation.Service1_Reference.IService1>, Presentation.Service1_Reference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Presentation.Service1_Reference.AdministrativeDTO GetAdministrativeId(int id) {
            return base.Channel.GetAdministrativeId(id);
        }
        
        public System.Threading.Tasks.Task<Presentation.Service1_Reference.AdministrativeDTO> GetAdministrativeIdAsync(int id) {
            return base.Channel.GetAdministrativeIdAsync(id);
        }
        
        public void InsertAdministrative(Presentation.Service1_Reference.AdministrativeDTO administrative) {
            base.Channel.InsertAdministrative(administrative);
        }
        
        public System.Threading.Tasks.Task InsertAdministrativeAsync(Presentation.Service1_Reference.AdministrativeDTO administrative) {
            return base.Channel.InsertAdministrativeAsync(administrative);
        }
        
        public void DeleteAdministrative(int id) {
            base.Channel.DeleteAdministrative(id);
        }
        
        public System.Threading.Tasks.Task DeleteAdministrativeAsync(int id) {
            return base.Channel.DeleteAdministrativeAsync(id);
        }
        
        public void ModifyAdministrative(Presentation.Service1_Reference.AdministrativeDTO administrative) {
            base.Channel.ModifyAdministrative(administrative);
        }
        
        public System.Threading.Tasks.Task ModifyAdministrativeAsync(Presentation.Service1_Reference.AdministrativeDTO administrative) {
            return base.Channel.ModifyAdministrativeAsync(administrative);
        }
        
        public Presentation.Service1_Reference.AdministrativeList GetAllAdministrative() {
            return base.Channel.GetAllAdministrative();
        }
        
        public System.Threading.Tasks.Task<Presentation.Service1_Reference.AdministrativeList> GetAllAdministrativeAsync() {
            return base.Channel.GetAllAdministrativeAsync();
        }
        
        public bool LoginAdministrative(int id, string password) {
            return base.Channel.LoginAdministrative(id, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAdministrativeAsync(int id, string password) {
            return base.Channel.LoginAdministrativeAsync(id, password);
        }
        
        public bool IsAdministrative(int id) {
            return base.Channel.IsAdministrative(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsAdministrativeAsync(int id) {
            return base.Channel.IsAdministrativeAsync(id);
        }
        
        public Presentation.Service1_Reference.AdministrativeDTO GetAdministrativeCardId(int id) {
            return base.Channel.GetAdministrativeCardId(id);
        }
        
        public System.Threading.Tasks.Task<Presentation.Service1_Reference.AdministrativeDTO> GetAdministrativeCardIdAsync(int id) {
            return base.Channel.GetAdministrativeCardIdAsync(id);
        }
    }
}
